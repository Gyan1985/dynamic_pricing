c
duplicate_product.save!
duplicate_product
n
Product.count
c
product.default_price
n
product.default_price
n
product.default_price
n
product.default_price
n
product.default_price
c
product.default_price
n
product.default_price
n
product.default_price
n
product.default_price
product.items_count
c
product.items_count
n
product.default_price
n
product.default_price
c
product.default_price
n
product.default_price
n
product.default_price
product.qty
c
product.qty
product.default_price
n
product.default_price
n
product.default_price
n
c
product.default_price
n
product.default_price
n
product.default_price
n
product.default_price
c
product.default_price
n
product.default_price
c
n
product.default_price
n
product.default_price
n
product.default_price
c
product.default_price
n
product.default_price
n
product.default_price
n
product.default_price
c
n
product.default_price
n
product.default_price
n
product.default_price
n
product.default_price
c
product.default_price
n
product.default_price
n
product.default_price
n
product.default_price
n
c
n
product.default_price
n
competitor_price
product.default_price
c
product.default_price
n
product.default_price
n
product.default_price
n
product.default_price
n
product.default_price
n
product.default_price
c
product.items_count
c
product.items_count
c
cart_items.count
cart_items
c
cart_items.where(:created_at.gte => DAYS_TO_CONSIDER).count
cart_items
c
cart_items
cart_items.where(:created_at.gte => DAYS_TO_CONSIDER)
cart_items.where(:created_at.gte => DAYS_TO_CONSIDER).count
cart_items
c
product.items_count
c
cart_items.where(:created_at.gte => DAYS_TO_CONSIDER).count
c
cart_items.where(:created_at.gte => DAYS_TO_CONSIDER).count
c
cart_items
c
product.cart_items_count
c
cart_items
c
product.cart_items_count
c
cart_items
continue
product.cart_items_count
c
cart_items.where(:created_at.gte => DAYS_TO_CONSIDER).count
c
product.cart_items_count
c
product.cart_items_count
n
c
product.cart_items_count
n
c
product.cart_items.where(:created_at.gte => DAYS_TO_CONSIDER).count
n
continue
c
product.cart_items.where(:created_at.gte => DAYS_TO_CONSIDER).count
recent_cart_items_count
n
product.default_price
n
competitor_price
n
product.default_price
c
product.default_price
n
product.qty
n
recent_cart_items_count
n
competitor_price
product.default_price
c
product.default_price
n
product.default_price
n
product.default_price
n
product.default_price
n
competitor_price
product
c
Product.count
product
Product.count
c
product.save
n
c
Product.count
Product.all
competitor_prices
c
product
n
c
n
c
n
Product.last
Product.count
c
Product.last
Product.count
c
Product.count
Product.destroy_all
Product.count
competitor_price['name']
continue
competitor_price.first["name"]
competitor_price.first.name
competitor_price.first
competitor_price[:name]
competitor_price["name"]
competitor_price
product = Product.find_by(name: competitor_price['name'])
competitor_price = competitor_prices
c = competitor_prices
competitor_prices.count
n
continue
n
competitor_prices
'
n
continue
Product.count
continue
order.save
order = Order.new(cart: cart)
cart = Cart.find(params[:cart_id])
order = Order.new(state: "pending", cart: cart)
cart = Cart.find(params[:cart_id])
order = Order.new(state: "pending", cart: cart)
cart = Cart.find(params[:cart_id])
order.save!
order!.save
order.save
order
n
order = Order.new(state: "pending", cart: cart)
cart
n
params
continue
n
continue
cart
n
unless product = Product.find(item[:product_id]) raise Mongoid::Errors::DocumentNotFound.new "Product with id #{item[:product_id]} not found." end
items
n
